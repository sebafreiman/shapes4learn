package edu.maimonides.multimedia.shapes4learn.model;

import edu.maimonides.multimedia.shapes4learn.analysis.LexicalException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This empty class represents a Token generated by the lexical analyzer. It
 * will be implemented by the students according to the language and interpreter
 * requirements.
 *
 * @author Matias Giorgio
 *
 */
public class Token {

    String value;
    String type;

    public Token(String value, String type) {
        this.value = value;
        this.type = type;
    }

    public Token() {
        this.type = "";
    }

    public String getType() {
        return type;
    }

    public boolean matchType(String value) {
        return this.type.equals(value);
    }

    public String getValue() {
        return value;
    }

    public void setType(String type) {
        this.type = type;
    }

    public void setValue(String value) throws LexicalException {
        switch (value) {
            case "create":
                this.setType("command_create");
                break;
            case "setcolor":
                this.setType("command_setcolor");
                break;
            case "setbase":
                this.setType("command_setbase");
                break;
            case "setheight":
                this.setType("command_setheight");
                break;
            case "setradius":
                this.setType("command_setradius");
                break;
            case "setposition":
                this.setType("command_setposition");
                break;
            case "circle":
                this.setType("shape_circle");
                break;
            case "rectangle":
                this.setType("shape_rectangle");
                break;
            case "in":
                this.setType("connector_in");
                break;
            case "shape":
                this.setType("connector_shape");
                break;
            case "*":
                this.setType("expression_op_product");
                break;
            case "/":
                this.setType("expression_op_division");
                break;
            case "+":
                this.setType("expression_op_addition");
                break;
            case "-":
                this.setType("expression_op_subtract");
                break;
            case "(":
                this.setType("parenthesis_open");
                break;
            case ")":
                this.setType("parenthesis_close");
                break;
            case ";":
                this.setType("command_end");
                break;
            case ",":
                this.setType("expression_separator");
                break;
            default:
                if (value.matches("([0-9])*")) {
                    this.setType("expression_number");
                } else if (value.matches("^#(([A-F|a-f|0-9]{2}){3})")) {
                    this.setType("color_def");
                } else if (value.matches("[a-z|A-Z]{2,}")) {
                    this.setType("identifier");
                }
                break;

        }

        this.value = value;
    }

}
