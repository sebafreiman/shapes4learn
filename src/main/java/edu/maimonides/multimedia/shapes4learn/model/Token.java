package edu.maimonides.multimedia.shapes4learn.model;

import edu.maimonides.multimedia.shapes4learn.analysis.LexicalException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This empty class represents a Token generated by the lexical analyzer. It
 * will be implemented by the students according to the language and interpreter
 * requirements.
 *
 * @author Matias Giorgio
 *
 */
public class Token {

    String value;
    String type;

    public Token(String value, String type) {
        this.value = value;
        this.type = type;
    }

    public Token() {
        this.type = "";
    }

    public String getType() {
        return type;
    }
    
    public boolean matchType(String value){
        return this.type.equals(value);
    }

    public String getValue() {
        return value;
    }

    public void setType(String type) {
        this.type = type;
    }

    public void setValue(String value) throws LexicalException {
        if (value.matches("create")) {
            this.setType("command_create");
        } else if (value.matches("setcolor")) {
            this.setType("command_setcolor");
        } else if (value.matches("setbase")) {
            this.setType("command_setbase");
        } else if (value.matches("setheight")) {
            this.setType("command_setheight");
        } else if (value.matches("setradius")) {
            this.setType("command_setradius");
        } else if (value.matches("setposition")) {
            this.setType("command_setposition");
        } else if (value.matches("circle")) {
            this.setType("shape_type_circle");
        } else if (value.matches("rectangle")) {
            this.setType("shape_rectangle");
        } else if (value.matches("in")) {
            this.setType("connector_in");
        } else if (value.matches("shape")) {
            this.setType("connector_shape");
        } else if (value.matches("(\\+|-|\\*|/|[0-9])*")) {
            this.setType("expression");
        } else if (value.matches("\\(")) {
            this.setType("parenthesis_open");
        } else if (value.matches("\\)")) {
            this.setType("parenthesis_close");
        } else if (value.matches("^#(([A-F|a-f|0-9]{2}){3})")) {
            this.setType("color_def");
        } else if (value.matches("[a-z|A-Z]{2,}")) {
            this.setType("identifier");
        } else if (value.matches(";")) {
            this.setType("command_end");
        } else if (value.matches(",")) {
            this.setType("expression_separator");
        }
        this.value = value;
    }

}
